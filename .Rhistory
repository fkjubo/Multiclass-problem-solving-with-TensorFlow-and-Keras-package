install.packages("keras")
library(keras)
install_keras()
install_keras()
library(keras)
data.train[,1:21] <- normalize(data.train[,1:21])
data.train[,1:21] <- normalize(data.train[,1:21])
data.train <- as.matrix(data.train)
data.test <- as.matrix(data.test)
library(keras)
data.train <- read.csv("train (1).csv", T, ",")
data.test <- read.csv("test (1).csv", T, ",")
data.train <- as.matrix(data.train)
data.test <- as.matrix(data.test)
dimnames(data.train) <- NULL
dimnames(data.test) <- NULL
data.train[,1:21] <- normalize(data.train[,1:21])
data.test <- normalize(data.test)
data.train <- data.train[, 1:21]
data.trainTarget <- data.trainTarget[,22]
data.trainTarget <- data.train[,22]
data.train <- read.csv("train (1).csv", T, ",")
data.test <- read.csv("test (1).csv", T, ",")
data.train <- as.matrix(data.train)
data.test <- as.matrix(data.test)
dimnames(data.train) <- NULL
dimnames(data.test) <- NULL
data.trainN[,1:21] <- normalize(data.train[,1:21])
data.trainN <- data.train
data.train[,1:21] <- normalize(data.trainN[,1:21])
data.testN <- data.test
data.testN <- normalize(data.testN)
data.trainN <- data.trainN[, 1:21]
data.trainNTarget <- data.trainN[,22]
data.trainN <- normalize(data.trainN[,1:21])
data.testN <- normalize(data.testN)
data.trainN <- data.trainN[, 1:21]
data.trainNTarget <- data.train[,22]
trainLabels <- as_categorical(data.trainNTarget)
library(keras)
trainLabels <- as_categorical(data.trainNTarget)
trainLabels <- to_categorical(data.trainNTarget)
trainLabels
data.trainNTarget <- as.numeric(data.trainNTarget)-1
data.trainNTarget
trainLabels <- to_categorical(data.trainNTarget)
trainLabels
model <- keras_model_sequential()
model %>%
layer_dense(units = 8, activation = "relu", input_shape = c(21)) %>%
layer_dense(units = 3, activation = "softmax")
model
model %>%
compile(loss = "categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy")
history <- model %>%
fit(data.trainN,
trainLabels,
validation_split = .2,
batch_size = 32,
epochs = 200)
pred <- model %>%
predict_classes(data.testN)
prob <- model %>%
predict_proba(data.testN)
pred
model <- keras_model_sequential()
model %>%
layer_dense(units = 30, activation = "relu", input_shape = c(21)) %>%
layer_dense(units = 12, activation = "relu") %>%
layer_dense(units = 3, activation = "softmax")
# compile
model %>%
compile(loss = "categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy")
# fit
history <- model %>%
fit(data.trainN,
trainLabels,
validation_split = .2,
batch_size = 32,
epochs = 200)
pred <- model %>%
predict_classes(data.testN)
View(pred)
str(pred)
pred <- pred + 1
View(pred)
pred <- as.data.frame(pred)
write.csv(pred, "kaggle.csv")
model <- keras_model_sequential()
model %>%
layer_dense(units = 30, activation = "relu", input_shape = c(21)) %>%
layer_dense(units = 12, activation = "relu") %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dense(units = 3, activation = "softmax")
# compile
model %>%
compile(loss = "categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy")
# fit
history <- model %>%
fit(data.trainN,
trainLabels,
validation_split = .2,
batch_size = 42,
epochs = 350)
model <- keras_model_sequential()
model %>%
layer_dense(units = 12, activation = "relu", input_shape = c(21)) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dense(units = 3, activation = "softmax")
# compile
model %>%
compile(loss = "categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy")
# fit
history <- model %>%
fit(data.trainN,
trainLabels,
validation_split = .2,
batch_size = 32,
epochs = 350)
pred
NSP <- pred + 1
pred <- as.data.frame(NSP)
pred
View(NSP)
pred <- model %>%
predict_classes(data.testN)
library(keras)
pred <- model %>%
predict_classes(data.testN)
model <- keras_model_sequential()
model %>%
layer_dense(units = 6, activation = "relu", input_shape = c(21)) %>%
layer_dense(units = 3, activation = "relu") %>%
layer_dense(units = 3, activation = "softmax")
# compiling the model
model %>%
compile(loss = "categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy")
# fitting the model
history <- model %>%
fit(data.trainN,
trainLabels,
validation_split = .2,
batch_size = 32,
epochs = 350)
pred <- model %>%
predict_classes(data.testN)
View(pred)
NSP <- pred + 1
NSP <- as.data.frame(NSP)
NSP
NSP <- NSP$Patient
NSP
NSP <- as.data.frame(NSP)
NSP
NSP
NSP <- pred + 1
NSP
NSP <- as.data.frame(NSP)
NSP
write.csv(pred, "kaggle.csv", row.names = "Patient")
write.csv(pred, "kaggle.csv", col.names = "Patient")
write.csv(pred, "kaggle.csv", col.names = "Patient", row.names = T)
prob <- model %>%
predict_proba(data.testN)
prob
